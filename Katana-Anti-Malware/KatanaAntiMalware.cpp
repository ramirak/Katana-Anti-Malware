#include "KatanaAntiMalware.h"
#include "Security/Whitelisting.h"
#include "Events/MonitorRoutine.h"
#include <QMessageBox>
#include <QDebug>
#include <string>
#include <QSystemTrayIcon>
#include <QMenu>
#include <QCloseEvent>


void closeEvent(QCloseEvent* event)
{
    event->ignore();
}


void UpdateStatus(QLabel *label)
{
    switch (GetMode())
    {
    case SAFE_MODE:
        label->setText("Safe Mode Enabled");
        break;
    case TRAINING_MODE:
        label->setText("Training Mode Enabled");
        break;
    case ALLOW_MODE:
        label->setText("Allow Mode Enabled");
        break;
    default:
        break;
    }
}


void ask(QWidget* parent, std::string msg, void (*f)())
{
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(parent, "Katana Anti-Malware", msg.c_str(),
        QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        f();
    }
}

KatanaAntiMalware::KatanaAntiMalware(QWidget *parent)
    : QMainWindow(parent)
{

    QMenu* trayIconMenu = new QMenu();
    QSystemTrayIcon* tray = new QSystemTrayIcon(QIcon("icon.png"), this);
    tray->setContextMenu(trayIconMenu);
    tray->show();

    connect(tray, &QSystemTrayIcon::activated,
        [this](QSystemTrayIcon::ActivationReason reason) {show(); });
    
   
    ui.setupUi(this);
    QLabel *label = ui.Mode_Label;

    connect(ui.whitelist_button, &QPushButton::released, this, 
        [parent] { ask(parent, "Initiate scanning process?\nThis may take some time.", InitWhitelist); });    

    connect(ui.Exit_Button, &QPushButton::released, this,
        [parent, this] { hide(); });

    connect(ui.Training_Button, &QPushButton::released, this,
        [parent, label] { ask(parent, "Switch to training mode?", [] { SwitchMode(TRAINING_MODE); }); UpdateStatus(label); });

    connect(ui.Safe_Mode_Button, &QPushButton::released, this,
        [parent, label] { ask(parent, "Switch to safe mode?", [] { SwitchMode(SAFE_MODE); }); UpdateStatus(label); });

    connect(ui.Allow_Mode_Button, &QPushButton::released, this,
        [parent, label] { ask(parent, "Switch to allow mode?", [] { SwitchMode(ALLOW_MODE); }); UpdateStatus(label); });

}


KatanaAntiMalware::~KatanaAntiMalware()
{}

