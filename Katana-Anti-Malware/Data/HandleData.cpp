#include "HandleData.h"


BOOL CommitMap(std::map<string, vector<string>> map, string filename)
{
    ofstream mapfile(filename);

    if (mapfile.is_open())
    {
        std::map<string, vector<string>>::iterator it;
        for (it = map.begin(); it != map.end(); it++)
        {
            string row = "";
            row.append(it->first);
            vector<string> vec = it->second;

            for (int i = 0; i < vec.size(); i++)
            {
                row.append(";").append(vec[i]);
            }
            mapfile << row << endl;
        }
        mapfile.close();
        return TRUE;
    }
    else 
        return FALSE;
}

std::map<string, vector<string>> LoadMap(string filename)
{
    std::map<string, vector<string>> map;
    
    ifstream mapfile(filename);
    if (mapfile.is_open())
    {
        string row = "";
        while (std::getline(mapfile, row)) {
            std::vector<std::string> row_vec = split(row, ";");
            string name = row_vec[0];
            row_vec.erase(row_vec.begin());
            map.insert(pair<string, vector<string>>(name, row_vec));
        }

    }
    return map;
}

std::vector<std::string> split(const std::string str, const std::string regex_str)
{
    std::regex regexz(regex_str);
    std::vector<std::string> list(std::sregex_token_iterator(str.begin(), str.end(), regexz, -1), std::sregex_token_iterator());
    return list;
}


string wStringToString(wstring wstr) {
    using convert_typeX = std::codecvt_utf8<wchar_t>;
    std::wstring_convert<convert_typeX, wchar_t> converterX;
    return converterX.to_bytes(wstr);
}