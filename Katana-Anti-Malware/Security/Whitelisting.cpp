#include "Whitelisting.h"

BOOL RUNNING = FALSE;

map<string, vector<string>> WL;

BOOL isExec(string filename)
{
	return !strcmp(PathFindExtensionA(filename.c_str()), ".exe");
}

void InitWhitelist() 
{
	std::lock_guard lg(m);
	if (RUNNING)
		return;
	else RUNNING = TRUE;

	string sysdrive = getenv("SystemDrive");
	sysdrive.append("\\");

	recursive_directory_iterator i(sysdrive.c_str(), directory_options::skip_permission_denied), end;
	for (; i != end; ++i) {
		try
		{
				if (!is_directory(i->path()) && isExec(i->path().filename().u8string()))
				{
					vector<string> vec;
					vec.push_back(i->path().u8string());
					WL.insert(pair<string, vector<string>>(i->path().filename().u8string(), vec));
				}
		
		}
		catch (const std::exception& ex)
		{
			cerr << ex.what() << endl;	
			++i;
		}
	}
	CommitMap(WL, WHITELIST_FILE);
	RUNNING = FALSE;
}

BOOL ReloadList() 
{
	try
	{
		WL = LoadMap(WHITELIST_FILE);	
		return TRUE;
	}
	catch (const std::exception& ex)
	{
		cerr << ex.what() << endl;
		return FALSE;
	}

}

map<string, vector<string>>& GetList() {
	return WL;
}